// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TranslationGestureConfig.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from TranslationGestureConfig.proto</summary>
  public static partial class TranslationGestureConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for TranslationGestureConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TranslationGestureConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5UcmFuc2xhdGlvbkdlc3R1cmVDb25maWcucHJvdG8SE2NvbS5ncmlwYWJs",
            "ZS5wcm90b3MaEUdlc3R1cmVUeXBlLnByb3RvIpEBChhUcmFuc2xhdGlvbkdl",
            "c3R1cmVDb25maWcSLgoEdHlwZRgBIAEoDjIgLmNvbS5ncmlwYWJsZS5wcm90",
            "b3MuR2VzdHVyZVR5cGUSEwoLdHJhbnNsYXRpb24YAiABKAISFwoPZ2VzdHVy",
            "ZUR1cmF0aW9uGAMgASgFEhcKD3RpbWVvdXREdXJhdGlvbhgEIAEoBUIgChNj",
            "b20uZ3JpcGFibGUucHJvdG9zUAGqAgZQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protos.GestureTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.TranslationGestureConfig), global::Protos.TranslationGestureConfig.Parser, new[]{ "Type", "Translation", "GestureDuration", "TimeoutDuration" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TranslationGestureConfig : pb::IMessage<TranslationGestureConfig> {
    private static readonly pb::MessageParser<TranslationGestureConfig> _parser = new pb::MessageParser<TranslationGestureConfig>(() => new TranslationGestureConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TranslationGestureConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.TranslationGestureConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TranslationGestureConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TranslationGestureConfig(TranslationGestureConfig other) : this() {
      type_ = other.type_;
      translation_ = other.translation_;
      gestureDuration_ = other.gestureDuration_;
      timeoutDuration_ = other.timeoutDuration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TranslationGestureConfig Clone() {
      return new TranslationGestureConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protos.GestureType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.GestureType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 2;
    private float translation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Translation {
      get { return translation_; }
      set {
        translation_ = value;
      }
    }

    /// <summary>Field number for the "gestureDuration" field.</summary>
    public const int GestureDurationFieldNumber = 3;
    private int gestureDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GestureDuration {
      get { return gestureDuration_; }
      set {
        gestureDuration_ = value;
      }
    }

    /// <summary>Field number for the "timeoutDuration" field.</summary>
    public const int TimeoutDurationFieldNumber = 4;
    private int timeoutDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutDuration {
      get { return timeoutDuration_; }
      set {
        timeoutDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TranslationGestureConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TranslationGestureConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Translation != other.Translation) return false;
      if (GestureDuration != other.GestureDuration) return false;
      if (TimeoutDuration != other.TimeoutDuration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Translation != 0F) hash ^= Translation.GetHashCode();
      if (GestureDuration != 0) hash ^= GestureDuration.GetHashCode();
      if (TimeoutDuration != 0) hash ^= TimeoutDuration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Translation != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Translation);
      }
      if (GestureDuration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GestureDuration);
      }
      if (TimeoutDuration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TimeoutDuration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Translation != 0F) {
        size += 1 + 4;
      }
      if (GestureDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GestureDuration);
      }
      if (TimeoutDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutDuration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TranslationGestureConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Translation != 0F) {
        Translation = other.Translation;
      }
      if (other.GestureDuration != 0) {
        GestureDuration = other.GestureDuration;
      }
      if (other.TimeoutDuration != 0) {
        TimeoutDuration = other.TimeoutDuration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Protos.GestureType) input.ReadEnum();
            break;
          }
          case 21: {
            Translation = input.ReadFloat();
            break;
          }
          case 24: {
            GestureDuration = input.ReadInt32();
            break;
          }
          case 32: {
            TimeoutDuration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
