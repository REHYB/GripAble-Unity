// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyProgress.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from DailyProgress.proto</summary>
  public static partial class DailyProgressReflection {

    #region Descriptor
    /// <summary>File descriptor for DailyProgress.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DailyProgressReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNEYWlseVByb2dyZXNzLnByb3RvEhNjb20uZ3JpcGFibGUucHJvdG9zGhZN",
            "b3ZlbWVudFByb2dyZXNzLnByb3RvIssDCg1EYWlseVByb2dyZXNzEhEKCXRp",
            "bWVzdGFtcBgBIAEoAxIzCgRncmlwGAIgASgLMiUuY29tLmdyaXBhYmxlLnBy",
            "b3Rvcy5Nb3ZlbWVudFByb2dyZXNzEjMKBHJvbGwYAyABKAsyJS5jb20uZ3Jp",
            "cGFibGUucHJvdG9zLk1vdmVtZW50UHJvZ3Jlc3MSNAoFcGl0Y2gYBCABKAsy",
            "JS5jb20uZ3JpcGFibGUucHJvdG9zLk1vdmVtZW50UHJvZ3Jlc3MSMgoDeWF3",
            "GAUgASgLMiUuY29tLmdyaXBhYmxlLnByb3Rvcy5Nb3ZlbWVudFByb2dyZXNz",
            "Ek4KDnNlY29uZHNQZXJHYW1lGAYgAygLMjYuY29tLmdyaXBhYmxlLnByb3Rv",
            "cy5EYWlseVByb2dyZXNzLlNlY29uZHNQZXJHYW1lRW50cnkSGQoRc3RyZW5n",
            "dGhDb2xsZWN0ZWQYByABKAESCgoCaWQYCCABKAkSEgoKcGF0aWVudFVpZBgJ",
            "IAEoCRIRCgl1cGRhdGVkQXQYCiABKAMaNQoTU2Vjb25kc1BlckdhbWVFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBQiAKE2NvbS5ncmlw",
            "YWJsZS5wcm90b3NQAaoCBlByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protos.MovementProgressReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.DailyProgress), global::Protos.DailyProgress.Parser, new[]{ "Timestamp", "Grip", "Roll", "Pitch", "Yaw", "SecondsPerGame", "StrengthCollected", "Id", "PatientUid", "UpdatedAt" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DailyProgress : pb::IMessage<DailyProgress> {
    private static readonly pb::MessageParser<DailyProgress> _parser = new pb::MessageParser<DailyProgress>(() => new DailyProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.DailyProgressReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyProgress(DailyProgress other) : this() {
      timestamp_ = other.timestamp_;
      Grip = other.grip_ != null ? other.Grip.Clone() : null;
      Roll = other.roll_ != null ? other.Roll.Clone() : null;
      Pitch = other.pitch_ != null ? other.Pitch.Clone() : null;
      Yaw = other.yaw_ != null ? other.Yaw.Clone() : null;
      secondsPerGame_ = other.secondsPerGame_.Clone();
      strengthCollected_ = other.strengthCollected_;
      id_ = other.id_;
      patientUid_ = other.patientUid_;
      updatedAt_ = other.updatedAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyProgress Clone() {
      return new DailyProgress(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "grip" field.</summary>
    public const int GripFieldNumber = 2;
    private global::Protos.MovementProgress grip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.MovementProgress Grip {
      get { return grip_; }
      set {
        grip_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 3;
    private global::Protos.MovementProgress roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.MovementProgress Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 4;
    private global::Protos.MovementProgress pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.MovementProgress Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 5;
    private global::Protos.MovementProgress yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.MovementProgress Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "secondsPerGame" field.</summary>
    public const int SecondsPerGameFieldNumber = 6;
    private static readonly pbc::MapField<string, int>.Codec _map_secondsPerGame_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 50);
    private readonly pbc::MapField<string, int> secondsPerGame_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> SecondsPerGame {
      get { return secondsPerGame_; }
    }

    /// <summary>Field number for the "strengthCollected" field.</summary>
    public const int StrengthCollectedFieldNumber = 7;
    private double strengthCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrengthCollected {
      get { return strengthCollected_; }
      set {
        strengthCollected_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 8;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "patientUid" field.</summary>
    public const int PatientUidFieldNumber = 9;
    private string patientUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientUid {
      get { return patientUid_; }
      set {
        patientUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updatedAt" field.</summary>
    public const int UpdatedAtFieldNumber = 10;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Grip, other.Grip)) return false;
      if (!object.Equals(Roll, other.Roll)) return false;
      if (!object.Equals(Pitch, other.Pitch)) return false;
      if (!object.Equals(Yaw, other.Yaw)) return false;
      if (!SecondsPerGame.Equals(other.SecondsPerGame)) return false;
      if (StrengthCollected != other.StrengthCollected) return false;
      if (Id != other.Id) return false;
      if (PatientUid != other.PatientUid) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (grip_ != null) hash ^= Grip.GetHashCode();
      if (roll_ != null) hash ^= Roll.GetHashCode();
      if (pitch_ != null) hash ^= Pitch.GetHashCode();
      if (yaw_ != null) hash ^= Yaw.GetHashCode();
      hash ^= SecondsPerGame.GetHashCode();
      if (StrengthCollected != 0D) hash ^= StrengthCollected.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PatientUid.Length != 0) hash ^= PatientUid.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (grip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Grip);
      }
      if (roll_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Roll);
      }
      if (pitch_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pitch);
      }
      if (yaw_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Yaw);
      }
      secondsPerGame_.WriteTo(output, _map_secondsPerGame_codec);
      if (StrengthCollected != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(StrengthCollected);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Id);
      }
      if (PatientUid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PatientUid);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(UpdatedAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (grip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Grip);
      }
      if (roll_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roll);
      }
      if (pitch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pitch);
      }
      if (yaw_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Yaw);
      }
      size += secondsPerGame_.CalculateSize(_map_secondsPerGame_codec);
      if (StrengthCollected != 0D) {
        size += 1 + 8;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PatientUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientUid);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyProgress other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.grip_ != null) {
        if (grip_ == null) {
          grip_ = new global::Protos.MovementProgress();
        }
        Grip.MergeFrom(other.Grip);
      }
      if (other.roll_ != null) {
        if (roll_ == null) {
          roll_ = new global::Protos.MovementProgress();
        }
        Roll.MergeFrom(other.Roll);
      }
      if (other.pitch_ != null) {
        if (pitch_ == null) {
          pitch_ = new global::Protos.MovementProgress();
        }
        Pitch.MergeFrom(other.Pitch);
      }
      if (other.yaw_ != null) {
        if (yaw_ == null) {
          yaw_ = new global::Protos.MovementProgress();
        }
        Yaw.MergeFrom(other.Yaw);
      }
      secondsPerGame_.Add(other.secondsPerGame_);
      if (other.StrengthCollected != 0D) {
        StrengthCollected = other.StrengthCollected;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PatientUid.Length != 0) {
        PatientUid = other.PatientUid;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            if (grip_ == null) {
              grip_ = new global::Protos.MovementProgress();
            }
            input.ReadMessage(grip_);
            break;
          }
          case 26: {
            if (roll_ == null) {
              roll_ = new global::Protos.MovementProgress();
            }
            input.ReadMessage(roll_);
            break;
          }
          case 34: {
            if (pitch_ == null) {
              pitch_ = new global::Protos.MovementProgress();
            }
            input.ReadMessage(pitch_);
            break;
          }
          case 42: {
            if (yaw_ == null) {
              yaw_ = new global::Protos.MovementProgress();
            }
            input.ReadMessage(yaw_);
            break;
          }
          case 50: {
            secondsPerGame_.AddEntriesFrom(input, _map_secondsPerGame_codec);
            break;
          }
          case 57: {
            StrengthCollected = input.ReadDouble();
            break;
          }
          case 66: {
            Id = input.ReadString();
            break;
          }
          case 74: {
            PatientUid = input.ReadString();
            break;
          }
          case 80: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
