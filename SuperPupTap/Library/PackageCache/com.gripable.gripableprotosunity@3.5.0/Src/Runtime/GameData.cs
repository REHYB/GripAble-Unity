// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from GameData.proto</summary>
  public static partial class GameDataReflection {

    #region Descriptor
    /// <summary>File descriptor for GameData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5HYW1lRGF0YS5wcm90bxITY29tLmdyaXBhYmxlLnByb3RvcyKzAQoIR2Ft",
            "ZURhdGESEAoIc3F1ZWV6ZXMYASABKAUSEAoIcmVsZWFzZXMYAiABKAUSEgoK",
            "cHJvbmF0aW9ucxgDIAEoBRITCgtzdXBpbmF0aW9ucxgEIAEoBRIQCghmbGV4",
            "aW9ucxgFIAEoBRISCgpleHRlbnNpb25zGAYgASgFEg8KB3JhZGlhbHMYByAB",
            "KAUSDgoGdWxuYXJzGAggASgFEhMKC3RpbWVQbGF5aW5nGAkgASgFQiAKE2Nv",
            "bS5ncmlwYWJsZS5wcm90b3NQAaoCBlByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.GameData), global::Protos.GameData.Parser, new[]{ "Squeezes", "Releases", "Pronations", "Supinations", "Flexions", "Extensions", "Radials", "Ulnars", "TimePlaying" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameData : pb::IMessage<GameData> {
    private static readonly pb::MessageParser<GameData> _parser = new pb::MessageParser<GameData>(() => new GameData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.GameDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData(GameData other) : this() {
      squeezes_ = other.squeezes_;
      releases_ = other.releases_;
      pronations_ = other.pronations_;
      supinations_ = other.supinations_;
      flexions_ = other.flexions_;
      extensions_ = other.extensions_;
      radials_ = other.radials_;
      ulnars_ = other.ulnars_;
      timePlaying_ = other.timePlaying_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData Clone() {
      return new GameData(this);
    }

    /// <summary>Field number for the "squeezes" field.</summary>
    public const int SqueezesFieldNumber = 1;
    private int squeezes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Squeezes {
      get { return squeezes_; }
      set {
        squeezes_ = value;
      }
    }

    /// <summary>Field number for the "releases" field.</summary>
    public const int ReleasesFieldNumber = 2;
    private int releases_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Releases {
      get { return releases_; }
      set {
        releases_ = value;
      }
    }

    /// <summary>Field number for the "pronations" field.</summary>
    public const int PronationsFieldNumber = 3;
    private int pronations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pronations {
      get { return pronations_; }
      set {
        pronations_ = value;
      }
    }

    /// <summary>Field number for the "supinations" field.</summary>
    public const int SupinationsFieldNumber = 4;
    private int supinations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Supinations {
      get { return supinations_; }
      set {
        supinations_ = value;
      }
    }

    /// <summary>Field number for the "flexions" field.</summary>
    public const int FlexionsFieldNumber = 5;
    private int flexions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flexions {
      get { return flexions_; }
      set {
        flexions_ = value;
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 6;
    private int extensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Extensions {
      get { return extensions_; }
      set {
        extensions_ = value;
      }
    }

    /// <summary>Field number for the "radials" field.</summary>
    public const int RadialsFieldNumber = 7;
    private int radials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radials {
      get { return radials_; }
      set {
        radials_ = value;
      }
    }

    /// <summary>Field number for the "ulnars" field.</summary>
    public const int UlnarsFieldNumber = 8;
    private int ulnars_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ulnars {
      get { return ulnars_; }
      set {
        ulnars_ = value;
      }
    }

    /// <summary>Field number for the "timePlaying" field.</summary>
    public const int TimePlayingFieldNumber = 9;
    private int timePlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimePlaying {
      get { return timePlaying_; }
      set {
        timePlaying_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Squeezes != other.Squeezes) return false;
      if (Releases != other.Releases) return false;
      if (Pronations != other.Pronations) return false;
      if (Supinations != other.Supinations) return false;
      if (Flexions != other.Flexions) return false;
      if (Extensions != other.Extensions) return false;
      if (Radials != other.Radials) return false;
      if (Ulnars != other.Ulnars) return false;
      if (TimePlaying != other.TimePlaying) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Squeezes != 0) hash ^= Squeezes.GetHashCode();
      if (Releases != 0) hash ^= Releases.GetHashCode();
      if (Pronations != 0) hash ^= Pronations.GetHashCode();
      if (Supinations != 0) hash ^= Supinations.GetHashCode();
      if (Flexions != 0) hash ^= Flexions.GetHashCode();
      if (Extensions != 0) hash ^= Extensions.GetHashCode();
      if (Radials != 0) hash ^= Radials.GetHashCode();
      if (Ulnars != 0) hash ^= Ulnars.GetHashCode();
      if (TimePlaying != 0) hash ^= TimePlaying.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Squeezes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Squeezes);
      }
      if (Releases != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Releases);
      }
      if (Pronations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pronations);
      }
      if (Supinations != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Supinations);
      }
      if (Flexions != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Flexions);
      }
      if (Extensions != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Extensions);
      }
      if (Radials != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Radials);
      }
      if (Ulnars != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ulnars);
      }
      if (TimePlaying != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TimePlaying);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Squeezes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Squeezes);
      }
      if (Releases != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Releases);
      }
      if (Pronations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pronations);
      }
      if (Supinations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Supinations);
      }
      if (Flexions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flexions);
      }
      if (Extensions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Extensions);
      }
      if (Radials != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radials);
      }
      if (Ulnars != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ulnars);
      }
      if (TimePlaying != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimePlaying);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameData other) {
      if (other == null) {
        return;
      }
      if (other.Squeezes != 0) {
        Squeezes = other.Squeezes;
      }
      if (other.Releases != 0) {
        Releases = other.Releases;
      }
      if (other.Pronations != 0) {
        Pronations = other.Pronations;
      }
      if (other.Supinations != 0) {
        Supinations = other.Supinations;
      }
      if (other.Flexions != 0) {
        Flexions = other.Flexions;
      }
      if (other.Extensions != 0) {
        Extensions = other.Extensions;
      }
      if (other.Radials != 0) {
        Radials = other.Radials;
      }
      if (other.Ulnars != 0) {
        Ulnars = other.Ulnars;
      }
      if (other.TimePlaying != 0) {
        TimePlaying = other.TimePlaying;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Squeezes = input.ReadInt32();
            break;
          }
          case 16: {
            Releases = input.ReadInt32();
            break;
          }
          case 24: {
            Pronations = input.ReadInt32();
            break;
          }
          case 32: {
            Supinations = input.ReadInt32();
            break;
          }
          case 40: {
            Flexions = input.ReadInt32();
            break;
          }
          case 48: {
            Extensions = input.ReadInt32();
            break;
          }
          case 56: {
            Radials = input.ReadInt32();
            break;
          }
          case 64: {
            Ulnars = input.ReadInt32();
            break;
          }
          case 72: {
            TimePlaying = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
