// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegionTransitionGestureConfig.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from RegionTransitionGestureConfig.proto</summary>
  public static partial class RegionTransitionGestureConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for RegionTransitionGestureConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RegionTransitionGestureConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNSZWdpb25UcmFuc2l0aW9uR2VzdHVyZUNvbmZpZy5wcm90bxITY29tLmdy",
            "aXBhYmxlLnByb3RvcxoRR2VzdHVyZVR5cGUucHJvdG8ikQEKHVJlZ2lvblRy",
            "YW5zaXRpb25HZXN0dXJlQ29uZmlnEi4KBHR5cGUYASABKA4yIC5jb20uZ3Jp",
            "cGFibGUucHJvdG9zLkdlc3R1cmVUeXBlEg0KBXN0YXJ0GAIgASgCEgsKA2Vu",
            "ZBgDIAEoAhIVCg10aW1lVGhyZXNob2xkGAQgASgFEg0KBXNjYWxlGAUgASgC",
            "QiAKE2NvbS5ncmlwYWJsZS5wcm90b3NQAaoCBlByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protos.GestureTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.RegionTransitionGestureConfig), global::Protos.RegionTransitionGestureConfig.Parser, new[]{ "Type", "Start", "End", "TimeThreshold", "Scale" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RegionTransitionGestureConfig : pb::IMessage<RegionTransitionGestureConfig> {
    private static readonly pb::MessageParser<RegionTransitionGestureConfig> _parser = new pb::MessageParser<RegionTransitionGestureConfig>(() => new RegionTransitionGestureConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionTransitionGestureConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.RegionTransitionGestureConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionTransitionGestureConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionTransitionGestureConfig(RegionTransitionGestureConfig other) : this() {
      type_ = other.type_;
      start_ = other.start_;
      end_ = other.end_;
      timeThreshold_ = other.timeThreshold_;
      scale_ = other.scale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionTransitionGestureConfig Clone() {
      return new RegionTransitionGestureConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protos.GestureType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.GestureType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private float start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private float end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "timeThreshold" field.</summary>
    public const int TimeThresholdFieldNumber = 4;
    private int timeThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeThreshold {
      get { return timeThreshold_; }
      set {
        timeThreshold_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 5;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionTransitionGestureConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionTransitionGestureConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (TimeThreshold != other.TimeThreshold) return false;
      if (Scale != other.Scale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Start != 0F) hash ^= Start.GetHashCode();
      if (End != 0F) hash ^= End.GetHashCode();
      if (TimeThreshold != 0) hash ^= TimeThreshold.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Start != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Start);
      }
      if (End != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(End);
      }
      if (TimeThreshold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TimeThreshold);
      }
      if (Scale != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Start != 0F) {
        size += 1 + 4;
      }
      if (End != 0F) {
        size += 1 + 4;
      }
      if (TimeThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThreshold);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionTransitionGestureConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Start != 0F) {
        Start = other.Start;
      }
      if (other.End != 0F) {
        End = other.End;
      }
      if (other.TimeThreshold != 0) {
        TimeThreshold = other.TimeThreshold;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Protos.GestureType) input.ReadEnum();
            break;
          }
          case 21: {
            Start = input.ReadFloat();
            break;
          }
          case 29: {
            End = input.ReadFloat();
            break;
          }
          case 32: {
            TimeThreshold = input.ReadInt32();
            break;
          }
          case 45: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
