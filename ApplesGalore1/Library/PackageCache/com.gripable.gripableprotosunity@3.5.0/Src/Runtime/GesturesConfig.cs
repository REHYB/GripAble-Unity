// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GesturesConfig.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from GesturesConfig.proto</summary>
  public static partial class GesturesConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for GesturesConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GesturesConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRHZXN0dXJlc0NvbmZpZy5wcm90bxITY29tLmdyaXBhYmxlLnByb3RvcxoR",
            "Rm9yY2VDb25maWcucHJvdG8aElJlZ2lvbkNvbmZpZy5wcm90bxoUUm90YXRp",
            "b25Db25maWcucHJvdG8i7AQKDkdlc3R1cmVzQ29uZmlnEjEKB3NxdWVlemUY",
            "ASABKAsyIC5jb20uZ3JpcGFibGUucHJvdG9zLkZvcmNlQ29uZmlnEjEKB3Jl",
            "bGVhc2UYAiABKAsyIC5jb20uZ3JpcGFibGUucHJvdG9zLkZvcmNlQ29uZmln",
            "EjQKB2ZsZXhpb24YAyABKAsyIy5jb20uZ3JpcGFibGUucHJvdG9zLlJvdGF0",
            "aW9uQ29uZmlnEjYKCWV4dGVuc2lvbhgEIAEoCzIjLmNvbS5ncmlwYWJsZS5w",
            "cm90b3MuUm90YXRpb25Db25maWcSNgoJcHJvbmF0aW9uGAUgASgLMiMuY29t",
            "LmdyaXBhYmxlLnByb3Rvcy5Sb3RhdGlvbkNvbmZpZxI3CgpzdXBpbmF0aW9u",
            "GAYgASgLMiMuY29tLmdyaXBhYmxlLnByb3Rvcy5Sb3RhdGlvbkNvbmZpZxIy",
            "CgV1bG5hchgHIAEoCzIjLmNvbS5ncmlwYWJsZS5wcm90b3MuUm90YXRpb25D",
            "b25maWcSMwoGcmFkaWFsGAggASgLMiMuY29tLmdyaXBhYmxlLnByb3Rvcy5S",
            "b3RhdGlvbkNvbmZpZxI3CgpuZXV0cmFsWWF3GAkgASgLMiMuY29tLmdyaXBh",
            "YmxlLnByb3Rvcy5Sb3RhdGlvbkNvbmZpZxI4CgtuZXV0cmFsUm9sbBgKIAEo",
            "CzIjLmNvbS5ncmlwYWJsZS5wcm90b3MuUm90YXRpb25Db25maWcSOQoMbmV1",
            "dHJhbFBpdGNoGAsgASgLMiMuY29tLmdyaXBhYmxlLnByb3Rvcy5Sb3RhdGlv",
            "bkNvbmZpZ0IgChNjb20uZ3JpcGFibGUucHJvdG9zUAGqAgZQcm90b3NiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protos.ForceConfigReflection.Descriptor, global::Protos.RegionConfigReflection.Descriptor, global::Protos.RotationConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.GesturesConfig), global::Protos.GesturesConfig.Parser, new[]{ "Squeeze", "Release", "Flexion", "Extension", "Pronation", "Supination", "Ulnar", "Radial", "NeutralYaw", "NeutralRoll", "NeutralPitch" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GesturesConfig : pb::IMessage<GesturesConfig> {
    private static readonly pb::MessageParser<GesturesConfig> _parser = new pb::MessageParser<GesturesConfig>(() => new GesturesConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GesturesConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.GesturesConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GesturesConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GesturesConfig(GesturesConfig other) : this() {
      Squeeze = other.squeeze_ != null ? other.Squeeze.Clone() : null;
      Release = other.release_ != null ? other.Release.Clone() : null;
      Flexion = other.flexion_ != null ? other.Flexion.Clone() : null;
      Extension = other.extension_ != null ? other.Extension.Clone() : null;
      Pronation = other.pronation_ != null ? other.Pronation.Clone() : null;
      Supination = other.supination_ != null ? other.Supination.Clone() : null;
      Ulnar = other.ulnar_ != null ? other.Ulnar.Clone() : null;
      Radial = other.radial_ != null ? other.Radial.Clone() : null;
      NeutralYaw = other.neutralYaw_ != null ? other.NeutralYaw.Clone() : null;
      NeutralRoll = other.neutralRoll_ != null ? other.NeutralRoll.Clone() : null;
      NeutralPitch = other.neutralPitch_ != null ? other.NeutralPitch.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GesturesConfig Clone() {
      return new GesturesConfig(this);
    }

    /// <summary>Field number for the "squeeze" field.</summary>
    public const int SqueezeFieldNumber = 1;
    private global::Protos.ForceConfig squeeze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.ForceConfig Squeeze {
      get { return squeeze_; }
      set {
        squeeze_ = value;
      }
    }

    /// <summary>Field number for the "release" field.</summary>
    public const int ReleaseFieldNumber = 2;
    private global::Protos.ForceConfig release_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.ForceConfig Release {
      get { return release_; }
      set {
        release_ = value;
      }
    }

    /// <summary>Field number for the "flexion" field.</summary>
    public const int FlexionFieldNumber = 3;
    private global::Protos.RotationConfig flexion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig Flexion {
      get { return flexion_; }
      set {
        flexion_ = value;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 4;
    private global::Protos.RotationConfig extension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig Extension {
      get { return extension_; }
      set {
        extension_ = value;
      }
    }

    /// <summary>Field number for the "pronation" field.</summary>
    public const int PronationFieldNumber = 5;
    private global::Protos.RotationConfig pronation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig Pronation {
      get { return pronation_; }
      set {
        pronation_ = value;
      }
    }

    /// <summary>Field number for the "supination" field.</summary>
    public const int SupinationFieldNumber = 6;
    private global::Protos.RotationConfig supination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig Supination {
      get { return supination_; }
      set {
        supination_ = value;
      }
    }

    /// <summary>Field number for the "ulnar" field.</summary>
    public const int UlnarFieldNumber = 7;
    private global::Protos.RotationConfig ulnar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig Ulnar {
      get { return ulnar_; }
      set {
        ulnar_ = value;
      }
    }

    /// <summary>Field number for the "radial" field.</summary>
    public const int RadialFieldNumber = 8;
    private global::Protos.RotationConfig radial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig Radial {
      get { return radial_; }
      set {
        radial_ = value;
      }
    }

    /// <summary>Field number for the "neutralYaw" field.</summary>
    public const int NeutralYawFieldNumber = 9;
    private global::Protos.RotationConfig neutralYaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig NeutralYaw {
      get { return neutralYaw_; }
      set {
        neutralYaw_ = value;
      }
    }

    /// <summary>Field number for the "neutralRoll" field.</summary>
    public const int NeutralRollFieldNumber = 10;
    private global::Protos.RotationConfig neutralRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig NeutralRoll {
      get { return neutralRoll_; }
      set {
        neutralRoll_ = value;
      }
    }

    /// <summary>Field number for the "neutralPitch" field.</summary>
    public const int NeutralPitchFieldNumber = 11;
    private global::Protos.RotationConfig neutralPitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.RotationConfig NeutralPitch {
      get { return neutralPitch_; }
      set {
        neutralPitch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GesturesConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GesturesConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Squeeze, other.Squeeze)) return false;
      if (!object.Equals(Release, other.Release)) return false;
      if (!object.Equals(Flexion, other.Flexion)) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      if (!object.Equals(Pronation, other.Pronation)) return false;
      if (!object.Equals(Supination, other.Supination)) return false;
      if (!object.Equals(Ulnar, other.Ulnar)) return false;
      if (!object.Equals(Radial, other.Radial)) return false;
      if (!object.Equals(NeutralYaw, other.NeutralYaw)) return false;
      if (!object.Equals(NeutralRoll, other.NeutralRoll)) return false;
      if (!object.Equals(NeutralPitch, other.NeutralPitch)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (squeeze_ != null) hash ^= Squeeze.GetHashCode();
      if (release_ != null) hash ^= Release.GetHashCode();
      if (flexion_ != null) hash ^= Flexion.GetHashCode();
      if (extension_ != null) hash ^= Extension.GetHashCode();
      if (pronation_ != null) hash ^= Pronation.GetHashCode();
      if (supination_ != null) hash ^= Supination.GetHashCode();
      if (ulnar_ != null) hash ^= Ulnar.GetHashCode();
      if (radial_ != null) hash ^= Radial.GetHashCode();
      if (neutralYaw_ != null) hash ^= NeutralYaw.GetHashCode();
      if (neutralRoll_ != null) hash ^= NeutralRoll.GetHashCode();
      if (neutralPitch_ != null) hash ^= NeutralPitch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (squeeze_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Squeeze);
      }
      if (release_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Release);
      }
      if (flexion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Flexion);
      }
      if (extension_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Extension);
      }
      if (pronation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pronation);
      }
      if (supination_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Supination);
      }
      if (ulnar_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Ulnar);
      }
      if (radial_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Radial);
      }
      if (neutralYaw_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(NeutralYaw);
      }
      if (neutralRoll_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(NeutralRoll);
      }
      if (neutralPitch_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(NeutralPitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (squeeze_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Squeeze);
      }
      if (release_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Release);
      }
      if (flexion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flexion);
      }
      if (extension_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (pronation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pronation);
      }
      if (supination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Supination);
      }
      if (ulnar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ulnar);
      }
      if (radial_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Radial);
      }
      if (neutralYaw_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NeutralYaw);
      }
      if (neutralRoll_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NeutralRoll);
      }
      if (neutralPitch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NeutralPitch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GesturesConfig other) {
      if (other == null) {
        return;
      }
      if (other.squeeze_ != null) {
        if (squeeze_ == null) {
          squeeze_ = new global::Protos.ForceConfig();
        }
        Squeeze.MergeFrom(other.Squeeze);
      }
      if (other.release_ != null) {
        if (release_ == null) {
          release_ = new global::Protos.ForceConfig();
        }
        Release.MergeFrom(other.Release);
      }
      if (other.flexion_ != null) {
        if (flexion_ == null) {
          flexion_ = new global::Protos.RotationConfig();
        }
        Flexion.MergeFrom(other.Flexion);
      }
      if (other.extension_ != null) {
        if (extension_ == null) {
          extension_ = new global::Protos.RotationConfig();
        }
        Extension.MergeFrom(other.Extension);
      }
      if (other.pronation_ != null) {
        if (pronation_ == null) {
          pronation_ = new global::Protos.RotationConfig();
        }
        Pronation.MergeFrom(other.Pronation);
      }
      if (other.supination_ != null) {
        if (supination_ == null) {
          supination_ = new global::Protos.RotationConfig();
        }
        Supination.MergeFrom(other.Supination);
      }
      if (other.ulnar_ != null) {
        if (ulnar_ == null) {
          ulnar_ = new global::Protos.RotationConfig();
        }
        Ulnar.MergeFrom(other.Ulnar);
      }
      if (other.radial_ != null) {
        if (radial_ == null) {
          radial_ = new global::Protos.RotationConfig();
        }
        Radial.MergeFrom(other.Radial);
      }
      if (other.neutralYaw_ != null) {
        if (neutralYaw_ == null) {
          neutralYaw_ = new global::Protos.RotationConfig();
        }
        NeutralYaw.MergeFrom(other.NeutralYaw);
      }
      if (other.neutralRoll_ != null) {
        if (neutralRoll_ == null) {
          neutralRoll_ = new global::Protos.RotationConfig();
        }
        NeutralRoll.MergeFrom(other.NeutralRoll);
      }
      if (other.neutralPitch_ != null) {
        if (neutralPitch_ == null) {
          neutralPitch_ = new global::Protos.RotationConfig();
        }
        NeutralPitch.MergeFrom(other.NeutralPitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (squeeze_ == null) {
              squeeze_ = new global::Protos.ForceConfig();
            }
            input.ReadMessage(squeeze_);
            break;
          }
          case 18: {
            if (release_ == null) {
              release_ = new global::Protos.ForceConfig();
            }
            input.ReadMessage(release_);
            break;
          }
          case 26: {
            if (flexion_ == null) {
              flexion_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(flexion_);
            break;
          }
          case 34: {
            if (extension_ == null) {
              extension_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(extension_);
            break;
          }
          case 42: {
            if (pronation_ == null) {
              pronation_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(pronation_);
            break;
          }
          case 50: {
            if (supination_ == null) {
              supination_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(supination_);
            break;
          }
          case 58: {
            if (ulnar_ == null) {
              ulnar_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(ulnar_);
            break;
          }
          case 66: {
            if (radial_ == null) {
              radial_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(radial_);
            break;
          }
          case 74: {
            if (neutralYaw_ == null) {
              neutralYaw_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(neutralYaw_);
            break;
          }
          case 82: {
            if (neutralRoll_ == null) {
              neutralRoll_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(neutralRoll_);
            break;
          }
          case 90: {
            if (neutralPitch_ == null) {
              neutralPitch_ = new global::Protos.RotationConfig();
            }
            input.ReadMessage(neutralPitch_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
