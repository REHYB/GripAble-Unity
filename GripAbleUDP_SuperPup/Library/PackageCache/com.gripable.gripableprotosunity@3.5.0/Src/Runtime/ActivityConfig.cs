// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityConfig.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from ActivityConfig.proto</summary>
  public static partial class ActivityConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for ActivityConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ActivityConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRBY3Rpdml0eUNvbmZpZy5wcm90bxITY29tLmdyaXBhYmxlLnByb3RvcxoK",
            "SGFuZC5wcm90bxoRQ2FsaWJyYXRpb24ucHJvdG8aDEdlbmRlci5wcm90bxoT",
            "RGFpbHlQcm9ncmVzcy5wcm90byLwBAoOQWN0aXZpdHlDb25maWcSEgoKbWFj",
            "QWRkcmVzcxgBIAEoCRITCgthdXRvQ29ubmVjdBgCIAEoCBIUCgxzaG93VHV0",
            "b3JpYWwYAyABKAgSEgoKcGF0aWVudFVpZBgEIAEoCRIQCgh1c2VybmFtZRgF",
            "IAEoCRIQCghkZW1vVXNlchgGIAEoCBI5Cg9ncmlwQ2FsaWJyYXRpb24YByAB",
            "KAsyIC5jb20uZ3JpcGFibGUucHJvdG9zLkNhbGlicmF0aW9uEjkKD3JvbGxD",
            "YWxpYnJhdGlvbhgIIAEoCzIgLmNvbS5ncmlwYWJsZS5wcm90b3MuQ2FsaWJy",
            "YXRpb24SOgoQcGl0Y2hDYWxpYnJhdGlvbhgJIAEoCzIgLmNvbS5ncmlwYWJs",
            "ZS5wcm90b3MuQ2FsaWJyYXRpb24SOAoOeWF3Q2FsaWJyYXRpb24YCiABKAsy",
            "IC5jb20uZ3JpcGFibGUucHJvdG9zLkNhbGlicmF0aW9uEhMKC3NjYWxlRmFj",
            "dG9yGAsgASgBEh8KF2xhdW5jaGVkRnJvbVBhY2thZ2VOYW1lGAwgASgJEicK",
            "BGhhbmQYDSABKA4yGS5jb20uZ3JpcGFibGUucHJvdG9zLkhhbmQSKwoGZ2Vu",
            "ZGVyGA4gASgOMhsuY29tLmdyaXBhYmxlLnByb3Rvcy5HZW5kZXISNwoLZGFp",
            "bHlSZXBvcnQYDyABKAsyIi5jb20uZ3JpcGFibGUucHJvdG9zLkRhaWx5UHJv",
            "Z3Jlc3MSNgoKZGFpbHlHb2FscxgQIAEoCzIiLmNvbS5ncmlwYWJsZS5wcm90",
            "b3MuRGFpbHlQcm9ncmVzc0IgChNjb20uZ3JpcGFibGUucHJvdG9zUAGqAgZQ",
            "cm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protos.HandReflection.Descriptor, global::Protos.CalibrationReflection.Descriptor, global::Protos.GenderReflection.Descriptor, global::Protos.DailyProgressReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.ActivityConfig), global::Protos.ActivityConfig.Parser, new[]{ "MacAddress", "AutoConnect", "ShowTutorial", "PatientUid", "Username", "DemoUser", "GripCalibration", "RollCalibration", "PitchCalibration", "YawCalibration", "ScaleFactor", "LaunchedFromPackageName", "Hand", "Gender", "DailyReport", "DailyGoals" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActivityConfig : pb::IMessage<ActivityConfig> {
    private static readonly pb::MessageParser<ActivityConfig> _parser = new pb::MessageParser<ActivityConfig>(() => new ActivityConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ActivityConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityConfig(ActivityConfig other) : this() {
      macAddress_ = other.macAddress_;
      autoConnect_ = other.autoConnect_;
      showTutorial_ = other.showTutorial_;
      patientUid_ = other.patientUid_;
      username_ = other.username_;
      demoUser_ = other.demoUser_;
      GripCalibration = other.gripCalibration_ != null ? other.GripCalibration.Clone() : null;
      RollCalibration = other.rollCalibration_ != null ? other.RollCalibration.Clone() : null;
      PitchCalibration = other.pitchCalibration_ != null ? other.PitchCalibration.Clone() : null;
      YawCalibration = other.yawCalibration_ != null ? other.YawCalibration.Clone() : null;
      scaleFactor_ = other.scaleFactor_;
      launchedFromPackageName_ = other.launchedFromPackageName_;
      hand_ = other.hand_;
      gender_ = other.gender_;
      DailyReport = other.dailyReport_ != null ? other.DailyReport.Clone() : null;
      DailyGoals = other.dailyGoals_ != null ? other.DailyGoals.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityConfig Clone() {
      return new ActivityConfig(this);
    }

    /// <summary>Field number for the "macAddress" field.</summary>
    public const int MacAddressFieldNumber = 1;
    private string macAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "autoConnect" field.</summary>
    public const int AutoConnectFieldNumber = 2;
    private bool autoConnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoConnect {
      get { return autoConnect_; }
      set {
        autoConnect_ = value;
      }
    }

    /// <summary>Field number for the "showTutorial" field.</summary>
    public const int ShowTutorialFieldNumber = 3;
    private bool showTutorial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowTutorial {
      get { return showTutorial_; }
      set {
        showTutorial_ = value;
      }
    }

    /// <summary>Field number for the "patientUid" field.</summary>
    public const int PatientUidFieldNumber = 4;
    private string patientUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientUid {
      get { return patientUid_; }
      set {
        patientUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 5;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "demoUser" field.</summary>
    public const int DemoUserFieldNumber = 6;
    private bool demoUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DemoUser {
      get { return demoUser_; }
      set {
        demoUser_ = value;
      }
    }

    /// <summary>Field number for the "gripCalibration" field.</summary>
    public const int GripCalibrationFieldNumber = 7;
    private global::Protos.Calibration gripCalibration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.Calibration GripCalibration {
      get { return gripCalibration_; }
      set {
        gripCalibration_ = value;
      }
    }

    /// <summary>Field number for the "rollCalibration" field.</summary>
    public const int RollCalibrationFieldNumber = 8;
    private global::Protos.Calibration rollCalibration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.Calibration RollCalibration {
      get { return rollCalibration_; }
      set {
        rollCalibration_ = value;
      }
    }

    /// <summary>Field number for the "pitchCalibration" field.</summary>
    public const int PitchCalibrationFieldNumber = 9;
    private global::Protos.Calibration pitchCalibration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.Calibration PitchCalibration {
      get { return pitchCalibration_; }
      set {
        pitchCalibration_ = value;
      }
    }

    /// <summary>Field number for the "yawCalibration" field.</summary>
    public const int YawCalibrationFieldNumber = 10;
    private global::Protos.Calibration yawCalibration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.Calibration YawCalibration {
      get { return yawCalibration_; }
      set {
        yawCalibration_ = value;
      }
    }

    /// <summary>Field number for the "scaleFactor" field.</summary>
    public const int ScaleFactorFieldNumber = 11;
    private double scaleFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ScaleFactor {
      get { return scaleFactor_; }
      set {
        scaleFactor_ = value;
      }
    }

    /// <summary>Field number for the "launchedFromPackageName" field.</summary>
    public const int LaunchedFromPackageNameFieldNumber = 12;
    private string launchedFromPackageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaunchedFromPackageName {
      get { return launchedFromPackageName_; }
      set {
        launchedFromPackageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 13;
    private global::Protos.Hand hand_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.Hand Hand {
      get { return hand_; }
      set {
        hand_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 14;
    private global::Protos.Gender gender_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "dailyReport" field.</summary>
    public const int DailyReportFieldNumber = 15;
    private global::Protos.DailyProgress dailyReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.DailyProgress DailyReport {
      get { return dailyReport_; }
      set {
        dailyReport_ = value;
      }
    }

    /// <summary>Field number for the "dailyGoals" field.</summary>
    public const int DailyGoalsFieldNumber = 16;
    private global::Protos.DailyProgress dailyGoals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.DailyProgress DailyGoals {
      get { return dailyGoals_; }
      set {
        dailyGoals_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MacAddress != other.MacAddress) return false;
      if (AutoConnect != other.AutoConnect) return false;
      if (ShowTutorial != other.ShowTutorial) return false;
      if (PatientUid != other.PatientUid) return false;
      if (Username != other.Username) return false;
      if (DemoUser != other.DemoUser) return false;
      if (!object.Equals(GripCalibration, other.GripCalibration)) return false;
      if (!object.Equals(RollCalibration, other.RollCalibration)) return false;
      if (!object.Equals(PitchCalibration, other.PitchCalibration)) return false;
      if (!object.Equals(YawCalibration, other.YawCalibration)) return false;
      if (ScaleFactor != other.ScaleFactor) return false;
      if (LaunchedFromPackageName != other.LaunchedFromPackageName) return false;
      if (Hand != other.Hand) return false;
      if (Gender != other.Gender) return false;
      if (!object.Equals(DailyReport, other.DailyReport)) return false;
      if (!object.Equals(DailyGoals, other.DailyGoals)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (AutoConnect != false) hash ^= AutoConnect.GetHashCode();
      if (ShowTutorial != false) hash ^= ShowTutorial.GetHashCode();
      if (PatientUid.Length != 0) hash ^= PatientUid.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (DemoUser != false) hash ^= DemoUser.GetHashCode();
      if (gripCalibration_ != null) hash ^= GripCalibration.GetHashCode();
      if (rollCalibration_ != null) hash ^= RollCalibration.GetHashCode();
      if (pitchCalibration_ != null) hash ^= PitchCalibration.GetHashCode();
      if (yawCalibration_ != null) hash ^= YawCalibration.GetHashCode();
      if (ScaleFactor != 0D) hash ^= ScaleFactor.GetHashCode();
      if (LaunchedFromPackageName.Length != 0) hash ^= LaunchedFromPackageName.GetHashCode();
      if (Hand != 0) hash ^= Hand.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (dailyReport_ != null) hash ^= DailyReport.GetHashCode();
      if (dailyGoals_ != null) hash ^= DailyGoals.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MacAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MacAddress);
      }
      if (AutoConnect != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoConnect);
      }
      if (ShowTutorial != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowTutorial);
      }
      if (PatientUid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PatientUid);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Username);
      }
      if (DemoUser != false) {
        output.WriteRawTag(48);
        output.WriteBool(DemoUser);
      }
      if (gripCalibration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GripCalibration);
      }
      if (rollCalibration_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RollCalibration);
      }
      if (pitchCalibration_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PitchCalibration);
      }
      if (yawCalibration_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(YawCalibration);
      }
      if (ScaleFactor != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(ScaleFactor);
      }
      if (LaunchedFromPackageName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LaunchedFromPackageName);
      }
      if (Hand != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Hand);
      }
      if (Gender != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Gender);
      }
      if (dailyReport_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DailyReport);
      }
      if (dailyGoals_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(DailyGoals);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (AutoConnect != false) {
        size += 1 + 1;
      }
      if (ShowTutorial != false) {
        size += 1 + 1;
      }
      if (PatientUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientUid);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (DemoUser != false) {
        size += 1 + 1;
      }
      if (gripCalibration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GripCalibration);
      }
      if (rollCalibration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollCalibration);
      }
      if (pitchCalibration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PitchCalibration);
      }
      if (yawCalibration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YawCalibration);
      }
      if (ScaleFactor != 0D) {
        size += 1 + 8;
      }
      if (LaunchedFromPackageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaunchedFromPackageName);
      }
      if (Hand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Hand);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (dailyReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyReport);
      }
      if (dailyGoals_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DailyGoals);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityConfig other) {
      if (other == null) {
        return;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      if (other.AutoConnect != false) {
        AutoConnect = other.AutoConnect;
      }
      if (other.ShowTutorial != false) {
        ShowTutorial = other.ShowTutorial;
      }
      if (other.PatientUid.Length != 0) {
        PatientUid = other.PatientUid;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.DemoUser != false) {
        DemoUser = other.DemoUser;
      }
      if (other.gripCalibration_ != null) {
        if (gripCalibration_ == null) {
          gripCalibration_ = new global::Protos.Calibration();
        }
        GripCalibration.MergeFrom(other.GripCalibration);
      }
      if (other.rollCalibration_ != null) {
        if (rollCalibration_ == null) {
          rollCalibration_ = new global::Protos.Calibration();
        }
        RollCalibration.MergeFrom(other.RollCalibration);
      }
      if (other.pitchCalibration_ != null) {
        if (pitchCalibration_ == null) {
          pitchCalibration_ = new global::Protos.Calibration();
        }
        PitchCalibration.MergeFrom(other.PitchCalibration);
      }
      if (other.yawCalibration_ != null) {
        if (yawCalibration_ == null) {
          yawCalibration_ = new global::Protos.Calibration();
        }
        YawCalibration.MergeFrom(other.YawCalibration);
      }
      if (other.ScaleFactor != 0D) {
        ScaleFactor = other.ScaleFactor;
      }
      if (other.LaunchedFromPackageName.Length != 0) {
        LaunchedFromPackageName = other.LaunchedFromPackageName;
      }
      if (other.Hand != 0) {
        Hand = other.Hand;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.dailyReport_ != null) {
        if (dailyReport_ == null) {
          dailyReport_ = new global::Protos.DailyProgress();
        }
        DailyReport.MergeFrom(other.DailyReport);
      }
      if (other.dailyGoals_ != null) {
        if (dailyGoals_ == null) {
          dailyGoals_ = new global::Protos.DailyProgress();
        }
        DailyGoals.MergeFrom(other.DailyGoals);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MacAddress = input.ReadString();
            break;
          }
          case 16: {
            AutoConnect = input.ReadBool();
            break;
          }
          case 24: {
            ShowTutorial = input.ReadBool();
            break;
          }
          case 34: {
            PatientUid = input.ReadString();
            break;
          }
          case 42: {
            Username = input.ReadString();
            break;
          }
          case 48: {
            DemoUser = input.ReadBool();
            break;
          }
          case 58: {
            if (gripCalibration_ == null) {
              gripCalibration_ = new global::Protos.Calibration();
            }
            input.ReadMessage(gripCalibration_);
            break;
          }
          case 66: {
            if (rollCalibration_ == null) {
              rollCalibration_ = new global::Protos.Calibration();
            }
            input.ReadMessage(rollCalibration_);
            break;
          }
          case 74: {
            if (pitchCalibration_ == null) {
              pitchCalibration_ = new global::Protos.Calibration();
            }
            input.ReadMessage(pitchCalibration_);
            break;
          }
          case 82: {
            if (yawCalibration_ == null) {
              yawCalibration_ = new global::Protos.Calibration();
            }
            input.ReadMessage(yawCalibration_);
            break;
          }
          case 89: {
            ScaleFactor = input.ReadDouble();
            break;
          }
          case 98: {
            LaunchedFromPackageName = input.ReadString();
            break;
          }
          case 104: {
            hand_ = (global::Protos.Hand) input.ReadEnum();
            break;
          }
          case 112: {
            gender_ = (global::Protos.Gender) input.ReadEnum();
            break;
          }
          case 122: {
            if (dailyReport_ == null) {
              dailyReport_ = new global::Protos.DailyProgress();
            }
            input.ReadMessage(dailyReport_);
            break;
          }
          case 130: {
            if (dailyGoals_ == null) {
              dailyGoals_ = new global::Protos.DailyProgress();
            }
            input.ReadMessage(dailyGoals_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
