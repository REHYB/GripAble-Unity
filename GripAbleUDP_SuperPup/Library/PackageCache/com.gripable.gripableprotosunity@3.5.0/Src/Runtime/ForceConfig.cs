// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ForceConfig.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from ForceConfig.proto</summary>
  public static partial class ForceConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for ForceConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ForceConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFGb3JjZUNvbmZpZy5wcm90bxITY29tLmdyaXBhYmxlLnByb3RvcyJYCgtG",
            "b3JjZUNvbmZpZxIYChByZWxlYXNlVGhyZXNob2xkGAEgASgCEhgKEHNxdWVl",
            "emVUaHJlc2hvbGQYAiABKAISFQoNdGltZVRocmVzaG9sZBgDIAEoBUIgChNj",
            "b20uZ3JpcGFibGUucHJvdG9zUAGqAgZQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.ForceConfig), global::Protos.ForceConfig.Parser, new[]{ "ReleaseThreshold", "SqueezeThreshold", "TimeThreshold" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ForceConfig : pb::IMessage<ForceConfig> {
    private static readonly pb::MessageParser<ForceConfig> _parser = new pb::MessageParser<ForceConfig>(() => new ForceConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ForceConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceConfig(ForceConfig other) : this() {
      releaseThreshold_ = other.releaseThreshold_;
      squeezeThreshold_ = other.squeezeThreshold_;
      timeThreshold_ = other.timeThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForceConfig Clone() {
      return new ForceConfig(this);
    }

    /// <summary>Field number for the "releaseThreshold" field.</summary>
    public const int ReleaseThresholdFieldNumber = 1;
    private float releaseThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReleaseThreshold {
      get { return releaseThreshold_; }
      set {
        releaseThreshold_ = value;
      }
    }

    /// <summary>Field number for the "squeezeThreshold" field.</summary>
    public const int SqueezeThresholdFieldNumber = 2;
    private float squeezeThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SqueezeThreshold {
      get { return squeezeThreshold_; }
      set {
        squeezeThreshold_ = value;
      }
    }

    /// <summary>Field number for the "timeThreshold" field.</summary>
    public const int TimeThresholdFieldNumber = 3;
    private int timeThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeThreshold {
      get { return timeThreshold_; }
      set {
        timeThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReleaseThreshold != other.ReleaseThreshold) return false;
      if (SqueezeThreshold != other.SqueezeThreshold) return false;
      if (TimeThreshold != other.TimeThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReleaseThreshold != 0F) hash ^= ReleaseThreshold.GetHashCode();
      if (SqueezeThreshold != 0F) hash ^= SqueezeThreshold.GetHashCode();
      if (TimeThreshold != 0) hash ^= TimeThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReleaseThreshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(ReleaseThreshold);
      }
      if (SqueezeThreshold != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SqueezeThreshold);
      }
      if (TimeThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimeThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReleaseThreshold != 0F) {
        size += 1 + 4;
      }
      if (SqueezeThreshold != 0F) {
        size += 1 + 4;
      }
      if (TimeThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThreshold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForceConfig other) {
      if (other == null) {
        return;
      }
      if (other.ReleaseThreshold != 0F) {
        ReleaseThreshold = other.ReleaseThreshold;
      }
      if (other.SqueezeThreshold != 0F) {
        SqueezeThreshold = other.SqueezeThreshold;
      }
      if (other.TimeThreshold != 0) {
        TimeThreshold = other.TimeThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            ReleaseThreshold = input.ReadFloat();
            break;
          }
          case 21: {
            SqueezeThreshold = input.ReadFloat();
            break;
          }
          case 24: {
            TimeThreshold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
