// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Calibration.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from Calibration.proto</summary>
  public static partial class CalibrationReflection {

    #region Descriptor
    /// <summary>File descriptor for Calibration.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CalibrationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFDYWxpYnJhdGlvbi5wcm90bxITY29tLmdyaXBhYmxlLnByb3RvcxoSTW92",
            "ZW1lbnRUeXBlLnByb3RvIpABCgtDYWxpYnJhdGlvbhIRCgl0aW1lc3RhbXAY",
            "ASABKAMSLwoEdHlwZRgCIAEoDjIhLmNvbS5ncmlwYWJsZS5wcm90b3MuTW92",
            "ZW1lbnRUeXBlEgsKA21pbhgDIAEoAhILCgNtYXgYBCABKAISEgoKcGF0aWVu",
            "dFVpZBgFIAEoCRIPCgduZXV0cmFsGAYgASgCQiAKE2NvbS5ncmlwYWJsZS5w",
            "cm90b3NQAaoCBlByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protos.MovementTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Calibration), global::Protos.Calibration.Parser, new[]{ "Timestamp", "Type", "Min", "Max", "PatientUid", "Neutral" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Calibration : pb::IMessage<Calibration> {
    private static readonly pb::MessageParser<Calibration> _parser = new pb::MessageParser<Calibration>(() => new Calibration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Calibration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.CalibrationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Calibration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Calibration(Calibration other) : this() {
      timestamp_ = other.timestamp_;
      type_ = other.type_;
      min_ = other.min_;
      max_ = other.max_;
      patientUid_ = other.patientUid_;
      neutral_ = other.neutral_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Calibration Clone() {
      return new Calibration(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protos.MovementType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.MovementType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 3;
    private float min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 4;
    private float max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "patientUid" field.</summary>
    public const int PatientUidFieldNumber = 5;
    private string patientUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientUid {
      get { return patientUid_; }
      set {
        patientUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "neutral" field.</summary>
    public const int NeutralFieldNumber = 6;
    private float neutral_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Neutral {
      get { return neutral_; }
      set {
        neutral_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Calibration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Calibration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Type != other.Type) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (PatientUid != other.PatientUid) return false;
      if (Neutral != other.Neutral) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Min != 0F) hash ^= Min.GetHashCode();
      if (Max != 0F) hash ^= Max.GetHashCode();
      if (PatientUid.Length != 0) hash ^= PatientUid.GetHashCode();
      if (Neutral != 0F) hash ^= Neutral.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Min != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Max);
      }
      if (PatientUid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PatientUid);
      }
      if (Neutral != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Neutral);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Min != 0F) {
        size += 1 + 4;
      }
      if (Max != 0F) {
        size += 1 + 4;
      }
      if (PatientUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientUid);
      }
      if (Neutral != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Calibration other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      if (other.PatientUid.Length != 0) {
        PatientUid = other.PatientUid;
      }
      if (other.Neutral != 0F) {
        Neutral = other.Neutral;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            type_ = (global::Protos.MovementType) input.ReadEnum();
            break;
          }
          case 29: {
            Min = input.ReadFloat();
            break;
          }
          case 37: {
            Max = input.ReadFloat();
            break;
          }
          case 42: {
            PatientUid = input.ReadString();
            break;
          }
          case 53: {
            Neutral = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
