// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RawGripData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CalibrationProtos {

  /// <summary>Holder for reflection information generated from RawGripData.proto</summary>
  public static partial class RawGripDataReflection {

    #region Descriptor
    /// <summary>File descriptor for RawGripData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RawGripDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFSYXdHcmlwRGF0YS5wcm90bxITY29tLmdyaXBhYmxlLnByb3RvcyJECgtS",
            "YXdHcmlwRGF0YRIRCgl0aW1lc3RhbXAYASABKAUSEAoIZm9yY2VDaDEYAiAB",
            "KAISEAoIZm9yY2VDaDIYAyABKAJCKwoTY29tLmdyaXBhYmxlLnByb3Rvc1AB",
            "qgIRQ2FsaWJyYXRpb25Qcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CalibrationProtos.RawGripData), global::CalibrationProtos.RawGripData.Parser, new[]{ "Timestamp", "ForceCh1", "ForceCh2" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RawGripData : pb::IMessage<RawGripData> {
    private static readonly pb::MessageParser<RawGripData> _parser = new pb::MessageParser<RawGripData>(() => new RawGripData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawGripData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalibrationProtos.RawGripDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawGripData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawGripData(RawGripData other) : this() {
      timestamp_ = other.timestamp_;
      forceCh1_ = other.forceCh1_;
      forceCh2_ = other.forceCh2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawGripData Clone() {
      return new RawGripData(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "forceCh1" field.</summary>
    public const int ForceCh1FieldNumber = 2;
    private float forceCh1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ForceCh1 {
      get { return forceCh1_; }
      set {
        forceCh1_ = value;
      }
    }

    /// <summary>Field number for the "forceCh2" field.</summary>
    public const int ForceCh2FieldNumber = 3;
    private float forceCh2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ForceCh2 {
      get { return forceCh2_; }
      set {
        forceCh2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawGripData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawGripData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ForceCh1 != other.ForceCh1) return false;
      if (ForceCh2 != other.ForceCh2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ForceCh1 != 0F) hash ^= ForceCh1.GetHashCode();
      if (ForceCh2 != 0F) hash ^= ForceCh2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Timestamp);
      }
      if (ForceCh1 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ForceCh1);
      }
      if (ForceCh2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ForceCh2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (ForceCh1 != 0F) {
        size += 1 + 4;
      }
      if (ForceCh2 != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawGripData other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ForceCh1 != 0F) {
        ForceCh1 = other.ForceCh1;
      }
      if (other.ForceCh2 != 0F) {
        ForceCh2 = other.ForceCh2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 21: {
            ForceCh1 = input.ReadFloat();
            break;
          }
          case 29: {
            ForceCh2 = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
