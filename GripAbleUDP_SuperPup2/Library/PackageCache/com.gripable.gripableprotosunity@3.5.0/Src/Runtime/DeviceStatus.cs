// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceStatus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from DeviceStatus.proto</summary>
  public static partial class DeviceStatusReflection {

    #region Descriptor
    /// <summary>File descriptor for DeviceStatus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeviceStatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJEZXZpY2VTdGF0dXMucHJvdG8SE2NvbS5ncmlwYWJsZS5wcm90b3MijQMK",
            "DERldmljZVN0YXR1cxIRCgl1bnRvdWNoZWQYASABKAgSGQoRY2FsY3VsYXRp",
            "bmdPZmZzZXQYAiABKAgSQAoLbG9ja2VkU3RhdGUYAyABKA4yKy5jb20uZ3Jp",
            "cGFibGUucHJvdG9zLkRldmljZVN0YXR1cy5Mb2NrU3RhdGUSHgoWcmVxdWly",
            "ZXNNYWdDYWxpYnJhdGlvbhgEIAEoCBIRCgl2aWJyYXRpbmcYBSABKAgSRAoM",
            "c2FtcGxpbmdSYXRlGAYgASgOMi4uY29tLmdyaXBhYmxlLnByb3Rvcy5EZXZp",
            "Y2VTdGF0dXMuU2FtcGxpbmdSYXRlEhAKCGNoYXJnaW5nGAcgASgIEhQKDGJh",
            "dHRlcnlMZXZlbBgIIAEoBSIyCglMb2NrU3RhdGUSDAoIVU5MT0NLRUQQABIK",
            "CgZMT0NLRUQQARILCgdCTE9DS0VEEAIiOAoMU2FtcGxpbmdSYXRlEgcKA09G",
            "RhAAEgkKBUh6XzEwEAESCQoFSHpfMjUQAhIJCgVIel81MBADQiAKE2NvbS5n",
            "cmlwYWJsZS5wcm90b3NQAaoCBlByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.DeviceStatus), global::Protos.DeviceStatus.Parser, new[]{ "Untouched", "CalculatingOffset", "LockedState", "RequiresMagCalibration", "Vibrating", "SamplingRate", "Charging", "BatteryLevel" }, null, new[]{ typeof(global::Protos.DeviceStatus.Types.LockState), typeof(global::Protos.DeviceStatus.Types.SamplingRate) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DeviceStatus : pb::IMessage<DeviceStatus> {
    private static readonly pb::MessageParser<DeviceStatus> _parser = new pb::MessageParser<DeviceStatus>(() => new DeviceStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.DeviceStatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceStatus(DeviceStatus other) : this() {
      untouched_ = other.untouched_;
      calculatingOffset_ = other.calculatingOffset_;
      lockedState_ = other.lockedState_;
      requiresMagCalibration_ = other.requiresMagCalibration_;
      vibrating_ = other.vibrating_;
      samplingRate_ = other.samplingRate_;
      charging_ = other.charging_;
      batteryLevel_ = other.batteryLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceStatus Clone() {
      return new DeviceStatus(this);
    }

    /// <summary>Field number for the "untouched" field.</summary>
    public const int UntouchedFieldNumber = 1;
    private bool untouched_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Untouched {
      get { return untouched_; }
      set {
        untouched_ = value;
      }
    }

    /// <summary>Field number for the "calculatingOffset" field.</summary>
    public const int CalculatingOffsetFieldNumber = 2;
    private bool calculatingOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CalculatingOffset {
      get { return calculatingOffset_; }
      set {
        calculatingOffset_ = value;
      }
    }

    /// <summary>Field number for the "lockedState" field.</summary>
    public const int LockedStateFieldNumber = 3;
    private global::Protos.DeviceStatus.Types.LockState lockedState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.DeviceStatus.Types.LockState LockedState {
      get { return lockedState_; }
      set {
        lockedState_ = value;
      }
    }

    /// <summary>Field number for the "requiresMagCalibration" field.</summary>
    public const int RequiresMagCalibrationFieldNumber = 4;
    private bool requiresMagCalibration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequiresMagCalibration {
      get { return requiresMagCalibration_; }
      set {
        requiresMagCalibration_ = value;
      }
    }

    /// <summary>Field number for the "vibrating" field.</summary>
    public const int VibratingFieldNumber = 5;
    private bool vibrating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vibrating {
      get { return vibrating_; }
      set {
        vibrating_ = value;
      }
    }

    /// <summary>Field number for the "samplingRate" field.</summary>
    public const int SamplingRateFieldNumber = 6;
    private global::Protos.DeviceStatus.Types.SamplingRate samplingRate_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.DeviceStatus.Types.SamplingRate SamplingRate {
      get { return samplingRate_; }
      set {
        samplingRate_ = value;
      }
    }

    /// <summary>Field number for the "charging" field.</summary>
    public const int ChargingFieldNumber = 7;
    private bool charging_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Charging {
      get { return charging_; }
      set {
        charging_ = value;
      }
    }

    /// <summary>Field number for the "batteryLevel" field.</summary>
    public const int BatteryLevelFieldNumber = 8;
    private int batteryLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatteryLevel {
      get { return batteryLevel_; }
      set {
        batteryLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Untouched != other.Untouched) return false;
      if (CalculatingOffset != other.CalculatingOffset) return false;
      if (LockedState != other.LockedState) return false;
      if (RequiresMagCalibration != other.RequiresMagCalibration) return false;
      if (Vibrating != other.Vibrating) return false;
      if (SamplingRate != other.SamplingRate) return false;
      if (Charging != other.Charging) return false;
      if (BatteryLevel != other.BatteryLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Untouched != false) hash ^= Untouched.GetHashCode();
      if (CalculatingOffset != false) hash ^= CalculatingOffset.GetHashCode();
      if (LockedState != 0) hash ^= LockedState.GetHashCode();
      if (RequiresMagCalibration != false) hash ^= RequiresMagCalibration.GetHashCode();
      if (Vibrating != false) hash ^= Vibrating.GetHashCode();
      if (SamplingRate != 0) hash ^= SamplingRate.GetHashCode();
      if (Charging != false) hash ^= Charging.GetHashCode();
      if (BatteryLevel != 0) hash ^= BatteryLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Untouched != false) {
        output.WriteRawTag(8);
        output.WriteBool(Untouched);
      }
      if (CalculatingOffset != false) {
        output.WriteRawTag(16);
        output.WriteBool(CalculatingOffset);
      }
      if (LockedState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LockedState);
      }
      if (RequiresMagCalibration != false) {
        output.WriteRawTag(32);
        output.WriteBool(RequiresMagCalibration);
      }
      if (Vibrating != false) {
        output.WriteRawTag(40);
        output.WriteBool(Vibrating);
      }
      if (SamplingRate != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SamplingRate);
      }
      if (Charging != false) {
        output.WriteRawTag(56);
        output.WriteBool(Charging);
      }
      if (BatteryLevel != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BatteryLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Untouched != false) {
        size += 1 + 1;
      }
      if (CalculatingOffset != false) {
        size += 1 + 1;
      }
      if (LockedState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LockedState);
      }
      if (RequiresMagCalibration != false) {
        size += 1 + 1;
      }
      if (Vibrating != false) {
        size += 1 + 1;
      }
      if (SamplingRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SamplingRate);
      }
      if (Charging != false) {
        size += 1 + 1;
      }
      if (BatteryLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatteryLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceStatus other) {
      if (other == null) {
        return;
      }
      if (other.Untouched != false) {
        Untouched = other.Untouched;
      }
      if (other.CalculatingOffset != false) {
        CalculatingOffset = other.CalculatingOffset;
      }
      if (other.LockedState != 0) {
        LockedState = other.LockedState;
      }
      if (other.RequiresMagCalibration != false) {
        RequiresMagCalibration = other.RequiresMagCalibration;
      }
      if (other.Vibrating != false) {
        Vibrating = other.Vibrating;
      }
      if (other.SamplingRate != 0) {
        SamplingRate = other.SamplingRate;
      }
      if (other.Charging != false) {
        Charging = other.Charging;
      }
      if (other.BatteryLevel != 0) {
        BatteryLevel = other.BatteryLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Untouched = input.ReadBool();
            break;
          }
          case 16: {
            CalculatingOffset = input.ReadBool();
            break;
          }
          case 24: {
            lockedState_ = (global::Protos.DeviceStatus.Types.LockState) input.ReadEnum();
            break;
          }
          case 32: {
            RequiresMagCalibration = input.ReadBool();
            break;
          }
          case 40: {
            Vibrating = input.ReadBool();
            break;
          }
          case 48: {
            samplingRate_ = (global::Protos.DeviceStatus.Types.SamplingRate) input.ReadEnum();
            break;
          }
          case 56: {
            Charging = input.ReadBool();
            break;
          }
          case 64: {
            BatteryLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeviceStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LockState {
        [pbr::OriginalName("UNLOCKED")] Unlocked = 0,
        [pbr::OriginalName("LOCKED")] Locked = 1,
        [pbr::OriginalName("BLOCKED")] Blocked = 2,
      }

      public enum SamplingRate {
        [pbr::OriginalName("OFF")] Off = 0,
        [pbr::OriginalName("Hz_10")] Hz10 = 1,
        [pbr::OriginalName("Hz_25")] Hz25 = 2,
        [pbr::OriginalName("Hz_50")] Hz50 = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
