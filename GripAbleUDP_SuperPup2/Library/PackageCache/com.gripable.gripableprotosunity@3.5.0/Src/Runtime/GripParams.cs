// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GripParams.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CalibrationProtos {

  /// <summary>Holder for reflection information generated from GripParams.proto</summary>
  public static partial class GripParamsReflection {

    #region Descriptor
    /// <summary>File descriptor for GripParams.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GripParamsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBHcmlwUGFyYW1zLnByb3RvEhNjb20uZ3JpcGFibGUucHJvdG9zIkEKCkdy",
            "aXBQYXJhbXMSDgoGb2Zmc2V0GAEgASgCEgoKAmMxGAIgASgCEgoKAmMyGAMg",
            "ASgCEgsKA3psdhgEIAEoAkIrChNjb20uZ3JpcGFibGUucHJvdG9zUAGqAhFD",
            "YWxpYnJhdGlvblByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CalibrationProtos.GripParams), global::CalibrationProtos.GripParams.Parser, new[]{ "Offset", "C1", "C2", "Zlv" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GripParams : pb::IMessage<GripParams> {
    private static readonly pb::MessageParser<GripParams> _parser = new pb::MessageParser<GripParams>(() => new GripParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GripParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CalibrationProtos.GripParamsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripParams(GripParams other) : this() {
      offset_ = other.offset_;
      c1_ = other.c1_;
      c2_ = other.c2_;
      zlv_ = other.zlv_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripParams Clone() {
      return new GripParams(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private float offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "c1" field.</summary>
    public const int C1FieldNumber = 2;
    private float c1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C1 {
      get { return c1_; }
      set {
        c1_ = value;
      }
    }

    /// <summary>Field number for the "c2" field.</summary>
    public const int C2FieldNumber = 3;
    private float c2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C2 {
      get { return c2_; }
      set {
        c2_ = value;
      }
    }

    /// <summary>Field number for the "zlv" field.</summary>
    public const int ZlvFieldNumber = 4;
    private float zlv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Zlv {
      get { return zlv_; }
      set {
        zlv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GripParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GripParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      if (C1 != other.C1) return false;
      if (C2 != other.C2) return false;
      if (Zlv != other.Zlv) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0F) hash ^= Offset.GetHashCode();
      if (C1 != 0F) hash ^= C1.GetHashCode();
      if (C2 != 0F) hash ^= C2.GetHashCode();
      if (Zlv != 0F) hash ^= Zlv.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Offset != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Offset);
      }
      if (C1 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(C1);
      }
      if (C2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(C2);
      }
      if (Zlv != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Zlv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0F) {
        size += 1 + 4;
      }
      if (C1 != 0F) {
        size += 1 + 4;
      }
      if (C2 != 0F) {
        size += 1 + 4;
      }
      if (Zlv != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GripParams other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0F) {
        Offset = other.Offset;
      }
      if (other.C1 != 0F) {
        C1 = other.C1;
      }
      if (other.C2 != 0F) {
        C2 = other.C2;
      }
      if (other.Zlv != 0F) {
        Zlv = other.Zlv;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Offset = input.ReadFloat();
            break;
          }
          case 21: {
            C1 = input.ReadFloat();
            break;
          }
          case 29: {
            C2 = input.ReadFloat();
            break;
          }
          case 37: {
            Zlv = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
