// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LevelEvent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from LevelEvent.proto</summary>
  public static partial class LevelEventReflection {

    #region Descriptor
    /// <summary>File descriptor for LevelEvent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LevelEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBMZXZlbEV2ZW50LnByb3RvEhNjb20uZ3JpcGFibGUucHJvdG9zGhRMZXZl",
            "bEV2ZW50VHlwZS5wcm90byJ7CgpMZXZlbEV2ZW50EhEKCXRpbWVzdGFtcBgB",
            "IAEoAxIxCgR0eXBlGAIgASgOMiMuY29tLmdyaXBhYmxlLnByb3Rvcy5MZXZl",
            "bEV2ZW50VHlwZRISCgpwYXRpZW50VWlkGAMgASgJEhMKC2xldmVsTnVtYmVy",
            "GAQgASgFQiAKE2NvbS5ncmlwYWJsZS5wcm90b3NQAaoCBlByb3Rvc2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protos.LevelEventTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.LevelEvent), global::Protos.LevelEvent.Parser, new[]{ "Timestamp", "Type", "PatientUid", "LevelNumber" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LevelEvent : pb::IMessage<LevelEvent> {
    private static readonly pb::MessageParser<LevelEvent> _parser = new pb::MessageParser<LevelEvent>(() => new LevelEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.LevelEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelEvent(LevelEvent other) : this() {
      timestamp_ = other.timestamp_;
      type_ = other.type_;
      patientUid_ = other.patientUid_;
      levelNumber_ = other.levelNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelEvent Clone() {
      return new LevelEvent(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protos.LevelEventType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protos.LevelEventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "patientUid" field.</summary>
    public const int PatientUidFieldNumber = 3;
    private string patientUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientUid {
      get { return patientUid_; }
      set {
        patientUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levelNumber" field.</summary>
    public const int LevelNumberFieldNumber = 4;
    private int levelNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelNumber {
      get { return levelNumber_; }
      set {
        levelNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Type != other.Type) return false;
      if (PatientUid != other.PatientUid) return false;
      if (LevelNumber != other.LevelNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PatientUid.Length != 0) hash ^= PatientUid.GetHashCode();
      if (LevelNumber != 0) hash ^= LevelNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (PatientUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PatientUid);
      }
      if (LevelNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LevelNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (PatientUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientUid);
      }
      if (LevelNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelEvent other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PatientUid.Length != 0) {
        PatientUid = other.PatientUid;
      }
      if (other.LevelNumber != 0) {
        LevelNumber = other.LevelNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            type_ = (global::Protos.LevelEventType) input.ReadEnum();
            break;
          }
          case 26: {
            PatientUid = input.ReadString();
            break;
          }
          case 32: {
            LevelNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
